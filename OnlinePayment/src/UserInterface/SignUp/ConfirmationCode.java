/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SignUp;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.CustomerOrganization;
import Business.Organization.Organization;
import Business.Role.CustomerRole;
import Business.UserAccount.UserAccount;
import UserInterface.FirstPageJPanel;
import java.awt.CardLayout;
import java.awt.Color;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import sun.misc.BASE64Encoder;

/**
 *
 * @author Pooja Narasimhan
 */
public class ConfirmationCode extends javax.swing.JPanel {

    /**
     * Creates new form ConfirmationCode
     */
    private JPanel container;
    private EcoSystem system;
    private String name;
    private String userName;
    private int ageInt;
    private String email;
    private Network network;
    private int randNum;
    private DB4OUtil db4OUtil;
    private String addressLine1;
    private String addressLine2;
    private String zipCode;
    private String pwd;
    private String rePwd;
    private String typeebill;
     private static final String ALGO = "AES";
    private static final byte[] keyValue = 
        new byte[] { 'T', 'h', 'e', 'B', 'e', 's', 't',
'S', 'e', 'c', 'r','e', 't', 'K', 'e', 'y' };
public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
        String encryptedValue = new BASE64Encoder().encode(encVal);
        return encryptedValue;
    }
private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
}
    
    public ConfirmationCode(JPanel container, EcoSystem system, String name, String userName, int ageInt,String email,Network network,int randNum,  DB4OUtil db4OUtil, String addressLine1, String addressLine2, String zipCode, String pwd, String rePwd, String typeebill) {
        initComponents();
        this.container = container;
        this.system=system;
        this.name = name;
        this.userName = userName;
        this.ageInt = ageInt;
        this.email = email;
        this.network = network;
        this.randNum = randNum;
        this.db4OUtil = db4OUtil;
        this.addressLine1 = addressLine1;
        this.addressLine2 = addressLine2;
        this.zipCode = zipCode;
        this.pwd = pwd;
        this.rePwd = rePwd;
        this.typeebill = typeebill;
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        btnfinish = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("Enter Confirmation Code");

        btnfinish.setText("Finish");
        btnfinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfinishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnfinish)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(230, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addComponent(btnfinish)
                .addContainerGap(309, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnfinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfinishActionPerformed
        // TODO add your handling code here:
        String code = txtCode.getText();
        
        int flag =0;
        if(code.length() == 0 || code.length() > 6 || !code.matches("[0-9]+$")){
            JOptionPane.showMessageDialog(null, "inavlid Confirmation code", "Failure", JOptionPane.PLAIN_MESSAGE);
            txtCode.setBorder(BorderFactory.createLineBorder(Color.red));
            flag=1;
        }
        
        int confirmationCode = Integer.parseInt(code);
         if(confirmationCode == randNum){
             flag=0;
         }
         else{
             flag=1;
            JOptionPane.showMessageDialog(null, "Confirmation Code does not match ", "Failure", JOptionPane.PLAIN_MESSAGE);
            return;
         }
         
         if(flag ==0){
             if(flag == 0) {
            if(pwd.equals(rePwd)) {
                for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        System.out.println(organization.getName());
                        if(organization.getName().equals("Customer Organization")) {
                            String passwordEnc ="";
                           try{ passwordEnc= encrypt(pwd);}
                           catch(Exception e){
                               JOptionPane.showMessageDialog(this, "Cannot decrypt");
                           }
                            CustomerOrganization co = (CustomerOrganization)organization;
                            int id=0;
        if(co.getEmployeeDirectory().getEmployeeList().size() == 0) {
        id=0;
        }
        else {
        Employee emp = co.getEmployeeDirectory().getEmployeeList().get(co.getEmployeeDirectory().getEmployeeList().size()-1);
        id=emp.getId();
        }
                            Employee emp = co.getEmployeeDirectory().createEmployee();
                            emp.setId(id+1);
                            emp.setName(name);
                            emp.setAge(ageInt);
                            emp.setMailId(email);
                            emp.setAddressLine1(addressLine1);
                            emp.setAddressLine2(addressLine2);
                            emp.setZipCode(Integer.parseInt(zipCode));
                            emp.setType(typeebill);
                            UserAccount ua = co.getUserAccountDirectory().createUserAccount(userName, passwordEnc, emp, new CustomerRole());
                            
                        }
                    }
                }
                 JOptionPane.showMessageDialog(null, "Thank you for registering.", "Success", JOptionPane.PLAIN_MESSAGE);
                
                
                db4OUtil.storeSystem(system);
                container.removeAll();
                FirstPageJPanel fpjp = new FirstPageJPanel();
                container.add("Open Page",fpjp);
                CardLayout layout = (CardLayout)container.getLayout();
                layout.next(container);
                container.removeAll();
         }
             
    }//GEN-LAST:event_btnfinishActionPerformed
         }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnfinish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtCode;
    // End of variables declaration//GEN-END:variables
}
