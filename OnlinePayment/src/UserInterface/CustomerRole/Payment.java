/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.EBillPayment.EBill;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Payment.CardDetails;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.security.Key;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import sun.misc.BASE64Decoder;

/**
 *
 * @author Pooja Narasimhan
 */
public class Payment extends javax.swing.JPanel {

    /**
     * Creates new form Payment
     */
    private JPanel container;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem system;
    private PayBill payBill;
    private EBill ebill;
    private static final String ALGO = "AES";
    private static final byte[] keyValue
            = new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't',
                'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};

    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

    public static String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    public Payment(JPanel container, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem system, EBill ebill, PayBill payBill) {

        initComponents();
        this.container = container;
        this.account = account;
        this.system = system;
        this.organization = organization;
        this.enterprise = enterprise;
        this.payBill = payBill;
        this.ebill = ebill;
        populateTable();
    }

    public void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        String decryCard = "";
        String DecyName = "";
        for (CardDetails cd : account.getCardDetailsList().getCardDetailsList()) {
            Object row[] = new Object[2];
            try {
                decryCard = decrypt(cd.getCardNumber());
                DecyName = decrypt(cd.getNameOnCard());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cannot decrpt");
                e.getStackTrace();
            }

            row[0] = decryCard;
            row[1] = DecyName;
            dtm.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCardNumber = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnPay = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPaymentDate = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        txtPin = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(204, 255, 204));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Card Number", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Card Number");

        txtCardNumber.setEnabled(false);

        jLabel2.setText("Enter Pin");

        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        jLabel3.setText("payment Date");

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jButton2)))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPay)
                            .addComponent(txtCardNumber)
                            .addComponent(txtPaymentDate, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(txtPin))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jButton1)))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPay)
                    .addComponent(jButton2))
                .addGap(51, 51, 51))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select a row");
            return;
        }

        String CardNum = (String )jTable1.getValueAt(selectedRow, 0);
        String name = (String )jTable1.getValueAt(selectedRow, 1);
       txtCardNumber.setText(String.valueOf(CardNum));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "please select a row");
            return;
        }
        String paymentDate = txtPaymentDate.getText();
        if(paymentDate.length()==0){
            JOptionPane.showMessageDialog(this, "Enter a date");
            return;
        }
        SimpleDateFormat dateformat = new SimpleDateFormat("MM/dd/yyyy");
        Date date1 = null;

        try {
            date1 = dateformat.parse(paymentDate);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid Date");
        }
         Date date2 = new Date();
            String sysDate = dateformat.format(date2);
            String sysmonth = sysDate.substring(0, 2);
            String sysday = sysDate.substring(3, 5);
            String sysyear = sysDate.substring(6, 10);
             String month = paymentDate.substring(0, 2);            
            String day = paymentDate.substring(3, 5);            
            String year = paymentDate.substring(6, 10);
            
             if (Integer.parseInt(year) > Integer.parseInt(sysyear)) {
                JOptionPane.showMessageDialog(this, "Wrong date ");
                return;
            }
             if(Integer.parseInt(month)> Integer.parseInt(sysmonth) && Integer.parseInt(year)== Integer.parseInt(sysyear)){
                JOptionPane.showMessageDialog(this, "Wrong date");
                return;
            }
            if (Integer.parseInt(month) == Integer.parseInt(sysmonth)) {
                if (Integer.parseInt(year) > Integer.parseInt(sysyear)) {
                    JOptionPane.showMessageDialog(this, "Wrong date");
                    return;
                }
            }
            if (Integer.parseInt(month) == Integer.parseInt(sysmonth)) {
                if (Integer.parseInt(year) == Integer.parseInt(sysyear)) {
                    if (Integer.parseInt(day) > Integer.parseInt(day)) {
                        JOptionPane.showMessageDialog(this, "Wrong date");
                        return;
                    }
                }
            }
            String billGenDate = ebill.getDate();
            String month1 = billGenDate.substring(0, 2);            
            String day1 = billGenDate.substring(3, 5);            
            String year1 = billGenDate.substring(6, 10);
             if (Integer.parseInt(year) < Integer.parseInt(year1)) {
                JOptionPane.showMessageDialog(this, "Payment Cannot be mode before bill generation ");
                return;
            }
            if (Integer.parseInt(month) == Integer.parseInt(sysmonth)) {
                if (Integer.parseInt(year) < Integer.parseInt(year1)) {
                    JOptionPane.showMessageDialog(this, "Payment Cannot be mode before bill generation");
                    return;
                }
            }
            if (Integer.parseInt(month) == Integer.parseInt(month1)) {
                if (Integer.parseInt(year) == Integer.parseInt(year1)) {
                    if (Integer.parseInt(day) < Integer.parseInt(day1)) {
                        JOptionPane.showMessageDialog(this, "Payment Cannot be mode before bill generation");
                        return;
                    }
                }
            }
            

         String CardNum = (String )jTable1.getValueAt(selectedRow, 0);
        String name = (String )jTable1.getValueAt(selectedRow, 1);
       char[] pwd1 = txtPin.getPassword();
       String pin = String.valueOf(pwd1);
        if(pin.length()==0 || pin.equals("")){
            JOptionPane.showMessageDialog(this, "Enter pin");
            return;
        }
        int flag =0;
        String decCard =null;
        String pwd = null;
        for(CardDetails cd : account.getCardDetailsList().getCardDetailsList())
        {   
            try{
            decCard = decrypt(cd.getCardNumber());
            pwd = decrypt(cd.getPin());
                    }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, e);
            }
            int flag1 =0;
        if (CardNum.equals(decCard)) {{
            
            if(pin.equals(pwd)){
            ebill.setStatus("Paid");
            ebill.setPaymentDate(paymentDate);
            JOptionPane.showMessageDialog(this, "Payment made");
            payBill.populateTable();
            flag1=1;
            return;
            }
        }
        }
        if(flag1==0){
            JOptionPane.showMessageDialog(this, "Password mismatch");
            return;
        
        }
    }
    }//GEN-LAST:event_btnPayActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPay;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCardNumber;
    private javax.swing.JTextField txtPaymentDate;
    private javax.swing.JPasswordField txtPin;
    // End of variables declaration//GEN-END:variables
}
