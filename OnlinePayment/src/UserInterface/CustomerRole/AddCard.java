/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.EBillPayment.EBill;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Payment.CardDetails;
import Business.UserAccount.UserAccount;
import UserInterface.SignUp.SignUp;
import java.awt.CardLayout;
import java.security.Key;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 *
 * @author Pooja Narasimhan
 */
public class AddCard extends javax.swing.JPanel {

    /**
     * Creates new form PaymentWindow
     */
    private JPanel container;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem system;

    private EBill ebill;
    int randNum = 0;
    String cardNum = "";
    String name = "";
    String date = "";
    String secNum = "";
    String pin = "";
    private static final String ALGO = "AES";
    private static final byte[] keyValue
            = new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't',
                'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};

    public static String encrypt(String Data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(Data.getBytes());
        String encryptedValue = new BASE64Encoder().encode(encVal);
        return encryptedValue;
    }

    private static Key generateKey() throws Exception {
        Key key = new SecretKeySpec(keyValue, ALGO);
        return key;
    }

    public static String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    public AddCard(JPanel container, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem system) {

        initComponents();
        this.container = container;
        this.account = account;
        this.system = system;
        this.organization = organization;
        this.enterprise = enterprise;

        this.ebill = ebill;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCardNumber = new javax.swing.JTextField();
        txtNameOnCard = new javax.swing.JTextField();
        txtExpiryDate = new javax.swing.JTextField();
        txtPay = new javax.swing.JButton();
        txtSecurtityNumber = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPin = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        txtConfirmationCode = new javax.swing.JTextField();
        txtAdd = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("Card Number");

        jLabel2.setText("Name on Card");

        jLabel3.setText("Expiry Date");

        jLabel4.setText("Security Number");

        txtPay.setText("Submit");
        txtPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Pin");

        jLabel7.setText("Confirmation Code");

        txtConfirmationCode.setEnabled(false);

        txtAdd.setText("Add");
        txtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jButton2)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtPay)
                        .addComponent(txtCardNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addComponent(txtNameOnCard)
                        .addComponent(txtExpiryDate)
                        .addComponent(txtSecurtityNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                        .addComponent(txtPin)
                        .addComponent(txtConfirmationCode))
                    .addComponent(txtAdd))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNameOnCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSecurtityNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(txtPay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtConfirmationCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdd)
                    .addComponent(jButton2))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayActionPerformed
        // TODO add your handling code here:

        try {
            cardNum = txtCardNumber.getText();
            char[] SecurityNum = txtSecurtityNumber.getPassword();
            name = txtNameOnCard.getText();
            date = txtExpiryDate.getText();
            secNum = String.valueOf(SecurityNum);
            char[] pinNum = txtPin.getPassword();
            pin = String.valueOf(pinNum);
            Date date2 = new Date();
            //if(date.length() ==0 || !date.matches("[([0-9]{2})\\\\([0-9]{2})\\\\([0-9]{4})]*$")){
             //   JOptionPane.showMessageDialog(null, "Enter vaid invalid date");
             //   return;
           // }
            SimpleDateFormat dateformat = new SimpleDateFormat("MM/dd/yyyy");
            String sysDate = dateformat.format(date2);
            Date date1 = null;
            //System.out.println(monthSys +dateSys +yearSys);
            date1 = dateformat.parse(date);
            
             
            

            if (!dateformat.format(date1).equals(date)) {
                JOptionPane.showMessageDialog(null, "Invalid Date Format");
                return;
            }

            if (cardNum.length() != 12 || !cardNum.matches("[0-9]*$")) {
                JOptionPane.showMessageDialog(this, "Invalid card number");
                return;
            }
            if (secNum.length() != 3 || !secNum.matches("[0-9]*$")) {
                JOptionPane.showMessageDialog(this, "Invalid Security Number");
                return;
            }

            if (name.length() == 0 || !name.matches("[a-zA-Z ]*$")) {
                JOptionPane.showMessageDialog(this, "Invalid name");
                return;
            }
            if (pin.length() != 4 || !pin.matches("[0-9]*$")) {
                JOptionPane.showMessageDialog(this, "Invalid pin");
                return;
            }
            
            
            
            String month = date.substring(0, 2);           
            String day = date.substring(3, 5);           
            String year = date.substring(6, 10);            
             String sysmonth = sysDate.substring(0, 2);           
            String sysday = sysDate.substring(3, 5);           
            String sysyear = sysDate.substring(6, 10);
            
            if(Integer.parseInt(year)< Integer.parseInt(sysyear) ){
                JOptionPane.showMessageDialog(this, "Card Expired");
                return;
            }
            if(Integer.parseInt(month)< Integer.parseInt(sysmonth) && Integer.parseInt(year)== Integer.parseInt(sysyear)){
                JOptionPane.showMessageDialog(this, "Card Expired");
                return;
            }
            if(Integer.parseInt(month)== Integer.parseInt(sysmonth) ){
                if(Integer.parseInt(year)< Integer.parseInt(sysyear)){
                JOptionPane.showMessageDialog(this, "Card Expired");
                return;
            }}
             if(Integer.parseInt(month)== Integer.parseInt(sysmonth) ){
                if(Integer.parseInt(year)==Integer.parseInt(sysyear)){
                     if(Integer.parseInt(day)<Integer.parseInt(sysday)){
                JOptionPane.showMessageDialog(this, "Card Expired");
                return;
            }}}

            
            int flag = 0;

            
            String email = account.getEmployee().getMailId();

            String to = email;
            Random rnd = new Random();
            randNum = 100000 + rnd.nextInt(900000);
            String randNum2 = String.valueOf(randNum);
            String content = "Online payment. Your Confirmation code is ";

            String body = content + randNum2;

            int flag2 = SignUp.eMail(to, body);
            if (flag2 == 2) {
                JOptionPane.showMessageDialog(null, "Email could not be sent to the specified email ID! Please try again", "Failure", JOptionPane.PLAIN_MESSAGE);
                flag = 1;
            }
            if (flag == 0) {

                Enterprise.EnterpriseType type = Enterprise.EnterpriseType.ElectricityBill;

                JOptionPane.showMessageDialog(null, "An email with Confirmation Code has been sent to the provided Email Address!", "Success", JOptionPane.PLAIN_MESSAGE);
                txtConfirmationCode.setEnabled(true);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid Date");
           

        }

    }//GEN-LAST:event_txtPayActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddActionPerformed
        // TODO add your handling code here:

        String code = txtConfirmationCode.getText();
        if(code.length() !=6 || !code.matches("[0-9]*$")){
            JOptionPane.showMessageDialog(this, "Invalid confirmation code");
            return;
        }
        int flag = 0;
        int confirmationCode = Integer.parseInt(code);
        if (confirmationCode == randNum) {
            flag = 0;
        } else {
            flag = 1;
            JOptionPane.showMessageDialog(null, "Confirmation Code does not match ", "Failure", JOptionPane.PLAIN_MESSAGE);
            return;
        }
        if (flag == 0) {
            String decyCard = "";
            for (CardDetails cd : account.getCardDetailsList().getCardDetailsList()) {
                try {
                    decyCard = decrypt(cd.getCardNumber());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Cannot decrypt");
                    e.getStackTrace();
                }
                if (decyCard.equals(cardNum) ) {

                    JOptionPane.showMessageDialog(this, "Card Already Exists");
                    flag = 1;
                    return;
                }
            }
        }
        if (flag == 0) {

            String encypCard = "";
            String encyExpDate = "";
            String encyName = "";
            String encrySecNum = "";
            String encypin = "";
            try {
                encypCard = encrypt(cardNum);
                encyExpDate = encrypt(date);
                encyName = encrypt(name);
                encrySecNum = encrypt(secNum);
                encypin = encrypt(pin);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cannot encrypt");
            }

            CardDetails cardDetails = account.getCardDetailsList().createCardDetails();
            System.out.println(encypCard);
            cardDetails.setCardNumber(encypCard);
            cardDetails.setExpiryDate(encyExpDate);
            cardDetails.setNameOnCard(encyName);
            cardDetails.setSecurityNumber(encrySecNum);
            cardDetails.setPin(encypin);

            JOptionPane.showMessageDialog(this, "Card Added");

        }
    }//GEN-LAST:event_txtAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton txtAdd;
    private javax.swing.JTextField txtCardNumber;
    private javax.swing.JTextField txtConfirmationCode;
    private javax.swing.JTextField txtExpiryDate;
    private javax.swing.JTextField txtNameOnCard;
    private javax.swing.JButton txtPay;
    private javax.swing.JPasswordField txtPin;
    private javax.swing.JPasswordField txtSecurtityNumber;
    // End of variables declaration//GEN-END:variables
}
